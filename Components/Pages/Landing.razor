@page "/"
@using chron_expression_web.Components.Views
@using chron_expression_web.Components.Pages
@rendermode InteractiveServer
@inject ILogger<Landing> Logger



<fieldset>
    <legend class = "float-none w-auto">Time</legend>
    <div>
        <AppointmentTime/>
    </div>
</fieldset>
<fieldset>
    <legend class="float-none w-auto">Recurrence Patern</legend>
    <div class = "d-flex" style="margin-left: 0;">
        <div style="margin-left: 0;  width: 20%">
            @foreach (ReccurencePatternOption opt in ReccurencePatternOptions!) {
                <div style="margin-top: 10;">
                
                <input type="radio" name="ReccurenceOptions" value="@opt.Option" @onchange="@(() => SelectElement(opt.Flag))">
                <label>@opt.Name</label>
                <br><br>
                </div>
            }
        </div>
        @if (ReccurenceSelection == ReccurenceFlags.Weekly){
            <div style="margin-left: 20px">
                <DayWeekView/>
            </div>
        }            
    </div>
</fieldset>






@code {
public ReccurenceFlags ReccurenceSelection;
public ReccurencePatternOption? Daily, Weekly, Monthly, Yearly;
public List<ReccurencePatternOption>? ReccurencePatternOptions;
public bool bing = false; 
[Flags]
public enum ReccurenceFlags {
    None = 0,
    Daily = 1,
    Weekly = 1 << 1,
    Monthly = 1 << 2,
    Yearly = 1 << 3

}
public class ReccurencePatternOption {
    public bool Option { get; set; }
    public string? Name { get; set; }
    public ReccurenceFlags Flag = 0;
    public ReccurencePatternOption(bool option, string name, ReccurenceFlags index) {
        Option = option;
        Name = name;
        Flag = index;
    }
}
protected override void OnInitialized() {
    ReccurencePatternOptions = [new ReccurencePatternOption(false, "Daily", ReccurenceFlags.Daily),
                                new ReccurencePatternOption(false, "Weekly", ReccurenceFlags.Weekly),
                                new ReccurencePatternOption(false, "Monthly", ReccurenceFlags.Monthly),
                                new ReccurencePatternOption(false, "Yearly", ReccurenceFlags.Yearly) ];
    
}
public void SelectElement(ReccurenceFlags Flag) {
    ReccurenceSelection = Flag;
    base.StateHasChanged();
}
}


<style>

body{
  font-family: 'Averia Serif Libre';
  margin: auto; 
  margin-top: 25vh;
  width: 320px; height: 320px;
}
div {
    margin-left: 10%;
}
fieldset {
    border: solid;
    width: 200%;
    padding: 10px;
    box-sizing: content-box;
    display: block;
    float: none;
    line-height: normal;
    position: static;
    z-index: auto;
    border: 1px groove #ddd !important;
    margin: 0 0 1.5em 0 !important;
    -webkit-box-shadow:  0px 0px 0px 0px #000;
            box-shadow:  0px 0px 0px 0px #000;
}
legend {
    font-size: 1.2em !important;
    
}
.flex-container {
  display: flex;
  background-color: DodgerBlue;
}
.flex-container > div {
  background-color: #f1f1f1;
  margin: 10px;
  padding: 20px;
  font-size: 30px;
}

</style>